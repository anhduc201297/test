<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Error_DateEarly" xml:space="preserve">
    <value>should be earlier than now.</value>
  </data>
  <data name="Error_DateOfBirth" xml:space="preserve">
    <value>Date of birthday have to be earlier than now.</value>
  </data>
  <data name="Error_DateOfIdentity" xml:space="preserve">
    <value>The date of issuance of the citizen identity card must be earlier than the current date.</value>
  </data>
  <data name="Error_DepartmentNotExists" xml:space="preserve">
    <value>Department is not exsist.</value>
  </data>
  <data name="Error_DuplicateEmployeeCode" xml:space="preserve">
    <value>Duplicate code.</value>
  </data>
  <data name="Error_EmailPatrern" xml:space="preserve">
    <value>Email is not formatted.</value>
  </data>
  <data name="Error_EmployeeCodeEmpty" xml:space="preserve">
    <value>Employee's code can't not be empty.</value>
  </data>
  <data name="Error_EmployeeDepartmentEmpty" xml:space="preserve">
    <value>Employee's department can't not be empty.</value>
  </data>
  <data name="Error_EmployeeNameEmpty" xml:space="preserve">
    <value>Employee's name can't not be empty.</value>
  </data>
  <data name="Error_EmployeeNameTooLong" xml:space="preserve">
    <value>Employee's name is too long, should be less than 100 characters.</value>
  </data>
  <data name="Error_Empty" xml:space="preserve">
    <value>can't be empty.</value>
  </data>
  <data name="Error_EndOfEmployeeCode" xml:space="preserve">
    <value>Employee code must be end with at least a digit.</value>
  </data>
  <data name="Error_Exception" xml:space="preserve">
    <value>Error. Please contact MISA for supported.</value>
  </data>
  <data name="Error_Format" xml:space="preserve">
    <value>Format is not valid.</value>
  </data>
  <data name="Error_GenderNotFound" xml:space="preserve">
    <value>Data about gender are not valid.</value>
  </data>
  <data name="Error_GetNewCode" xml:space="preserve">
    <value>Can't get new code, please fill out self.</value>
  </data>
  <data name="Error_MaxLength" xml:space="preserve">
    <value>Max length: </value>
  </data>
  <data name="Error_MinLength" xml:space="preserve">
    <value>Min length: </value>
  </data>
  <data name="Error_ModifiedAsync" xml:space="preserve">
    <value>Data has been modified by another, let try again late.</value>
  </data>
  <data name="Error_NotFound" xml:space="preserve">
    <value>The record is not exists.</value>
  </data>
  <data name="Error_Range" xml:space="preserve">
    <value>should be in range:</value>
  </data>
  <data name="Error_ValidateData" xml:space="preserve">
    <value>Data is not validated.</value>
  </data>
  <data name="Success_InsertEmployee" xml:space="preserve">
    <value>Add employee successfully!</value>
  </data>
  <data name="Text_Unknown" xml:space="preserve">
    <value>Unknown</value>
  </data>
</root>